#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define N 4

int A[N][N], sum[N];

void *func(void *arg) { // 스레드 함수
  int j, row;
  pthread_t tid = pthread_self(); // 스레드 ID를 가져옴
  
  row = *((int*)arg); // arg로부터 행 번호를 가져옴
  printf("Thread %d [%lu] computes sum of row %d\n", row, tid, row);

  // A[row]의 합을 계산하여 global sum[row]에 저장
  sum[row] = 0; // 행의 합을 계산하기 전에 초기화
  for (j = 0; j < N; j++) {
    sum[row] += A[row][j]; // 해당 행의 모든 원소 더하기
  }

  printf("Thread %d [%lu] done: sum[%d] = %d\n", row, tid, row, sum[row]);

  pthread_exit((void *)0); // 스레드 종료 (정상 종료)
}

int main(int argc, char *argv[]) {
  pthread_t thread[N]; // 스레드 ID 배열
  int i, j, r, total = 0;
  void *status;
  
  printf("Main: initialize A matrix\n");

  // A 행렬을 초기화하고 출력
  for (i = 0; i < N; i++) {
      sum[i] = 0; // sum 배열 초기화
      for (j = 0; j < N; j++) {
        A[i][j] = i * N + j + 1; // A 행렬을 값을 채움
        printf("%4d ", A[i][j]);
      }
      printf("\n");
  }

  printf("Main: create %d threads\n", N);

  // TODO: N개의 스레드를 생성하여 각 행의 합을 계산하도록 한다.
  for (i = 0; i < N; i++) {
    r = i; // 각 스레드에 행 번호를 전달
    pthread_create(&thread[i], NULL, func, (void *)&r);
  }

  printf("Main: try to join with threads\n");

  // TODO: 모든 스레드가 종료될 때까지 기다린다.
  for (i = 0; i < N; i++) {
    pthread_join(thread[i], &status); // 각 스레드가 끝날 때까지 대기
  }

  printf("Main: compute and print total sum: ");
  
  // TODO: sum 배열에 저장된 각 행의 합을 모두 더하여 총합을 구한다.
  for (i = 0; i < N; i++) {
    total += sum[i]; // 모든 행의 합을 구함
  }
  
  printf("%d\n", total); // 총합 출력

  pthread_exit(NULL); // 메인 스레드 종료
}
